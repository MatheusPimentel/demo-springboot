# Nome do seu pipeline. Ele aparecerá na aba "Actions" do seu repositório no GitHub.
name: CI Pipeline - Build e Teste do Projeto Spring Boot

# Define os gatilhos (triggers) que iniciarão este pipeline.
on:
  # Roda quando um push é feito para a branch 'main'.
  push:
    branches: [ "main" ]
  # Roda também quando um Pull Request é aberto ou atualizado para a branch 'main'.
  pull_request:
    branches: [ "main" ]

# Define os "trabalhos" (jobs) que o pipeline executará.
jobs:
  # Nomeamos nosso primeiro (e único) job como "build-and-test".
  build-and-test:
    # Define o tipo de máquina virtual que o job rodará. 'ubuntu-latest' é uma escolha comum e eficiente.
    runs-on: ubuntu-latest

    # Define a sequência de passos (steps) que o job executará.
    steps:
      # 1. Checkout do Código
      # Usa uma ação pré-pronta da comunidade para baixar o código do seu repositório para a máquina virtual.
      - name: Checkout do código
        uses: actions/checkout@v4

      # 2. Configurar o Java (JDK)
      # Configura a versão correta do Java na máquina virtual.
      - name: Configurar JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin' # Usando a mesma distribuição do nosso Dockerfile

      # 3. Cache de Dependências do Maven
      # Este passo é uma otimização. Ele guarda as dependências baixadas em cache para que
      # as próximas execuções do pipeline sejam muito mais rápidas.
      - name: Cache de dependências do Maven
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # 4. Compilar e Testar com Maven
      # Executa o comando do Maven para compilar o projeto e rodar todos os testes.
      # O -B (batch mode) é importante para rodar em um ambiente não-interativo como este.
      - name: Build e Teste com Maven
        run: mvn -B clean package