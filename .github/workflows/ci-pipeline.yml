# Nome do seu pipeline. Ele aparecerá na aba "Actions" do seu repositório no GitHub.
name: CI/CD Pipeline - Build, Teste e Publicação da Imagem Docker

# Define os gatilhos (triggers) que iniciarão este pipeline.
on:
  # Roda SOMENTE quando um push é feito para a branch 'main'.
  # Removemos o gatilho de pull_request para não publicar uma imagem a cada PR, apenas no merge final.
  push:
    branches: [ "main" ]

# Define os "trabalhos" (jobs) que o pipeline executará.
jobs:
  # ----------------------------------------------------
  # JOB 1: CI - Build e Teste (O que já tínhamos)
  # ----------------------------------------------------
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Configurar JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache de dependências do Maven
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build e Teste com Maven
        run: mvn -B clean package

  # ----------------------------------------------------
  # JOB 2: CD - Publicação da Imagem Docker
  # ----------------------------------------------------
  build-and-publish:
    # Garante que este job só rode se o job 'build-and-test' for bem-sucedido.
    needs: build-and-test
    runs-on: ubuntu-latest

    # Permissões necessárias para que o job possa fazer login e push no registro do GitHub.
    permissions:
      contents: read
      packages: write

    steps:
      # 1. Checkout do Código (necessário novamente no novo job)
      - name: Checkout do código
        uses: actions/checkout@v4

      # 2. Login no GitHub Container Registry (GHCR)
      # A autenticação é feita de forma segura usando um token temporário do próprio GitHub.
      - name: Login no GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 3. Extrair metadados (tags) para a imagem Docker
      # Esta ação inteligente cria tags úteis para a nossa imagem, como 'latest' e o hash do commit.
      - name: Extrair metadados da imagem Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}

      # 4. Construir e Publicar a imagem Docker
      # Usa o Dockerfile da raiz do projeto para construir a imagem e, em seguida,
      # a envia para o GHCR com as tags que geramos no passo anterior.
      - name: Construir e publicar imagem Docker
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}